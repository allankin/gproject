<?xml version="1.0" encoding="utf-8"?>
<project name="ant" default="deploy" basedir=".">
    <!-- ANT环境变量 -->  
    <property environment="env" />  
	<property file="build.properties" />
   
    <!-- SDK中tools目录 -->  
    <property name="sdk-tools" value="${SDK_FOLDER}/tools" />  
    <!-- SDK指定平台中tools目录 -->  
    <property name="sdk-platform-tools" value="${SDK_FOLDER}/platform-tools" />  
  
    <!-- 使用到的命令(当前系统为windows,如果系统为linux,可将.bat文件替换成相对应的命令) -->  
    <property name="aapt" value="${sdk-platform-tools}/aapt" />  
    <property name="aidl" value="${sdk-platform-tools}/aidl" />  
    <property name="dx" value="${sdk-platform-tools}/dx.bat" />  
    <property name="apkbuilder" value="${sdk-tools}/apkbuilder.bat" />  
    <property name="jarsigner" value="${env.JAVA_HOME}/bin/jarsigner" />  
	<property name="zipalign" value="${sdk-tools}/zipalign" />
	
      
    <!-- 编译需要的jar; 如果项目使用到地图服务则需要maps.jar -->  
    <property name="android-jar" value="${SDK_PLATFORM_FOLDER}/android.jar" />  
    
	
    <!--
    <property name="android-maps-jar" value="${sdk-folder}/add-ons/addon_google_apis_google_inc_8/libs/maps.jar"/>
    -->  
      
    <!-- 编译aidl文件所需的预处理框架文件framework.aidl -->  
    <property name="framework-aidl" value="${SDK_PLATFORM_FOLDER}/framework.aidl" />  
  
    <!-- 生成R文件的相对目录 -->  
    <property name="outdir-gen" value="gen" />  
    <!-- 编译后的文件放置目录 -->  
    <property name="outdir-bin" value="bin" />  
      
    <!-- 清单文件 -->  
    <property name="manifest-xml" value="AndroidManifest.xml" />  
    <!-- 源文件目录 -->  
    <property name="resource-dir" value="res" />  
    <property name="asset-dir" value="assets" />  
    <!-- java源文件目录 -->  
    <property name="srcdir" value="src" />  
    <property name="srcdir-ospath" value="${basedir}/${srcdir}" />  
    <!-- 外部类库所在目录 -->  
    <property name="external-libs" value="libs" />  
    <property name="external-libs-ospath" value="${basedir}/${external-libs}" />  
	
	
    <!-- 生成class目录 -->  
    <property name="outdir-classes" value="${outdir-bin}" />  
    <property name="outdir-classes-ospath" value="${basedir}/${outdir-classes}" />  
  
    <!-- classes.dex相关变量 -->  
    <property name="dex-file" value="classes.dex" />  
    <property name="dex-path" value="${outdir-bin}/${dex-file}" />  
    <property name="dex-ospath" value="${basedir}/${dex-path}" />  
  
	
    <!-- 经过aapt生成的资源包文件 -->  
    <property name="resources-package" value="${outdir-bin}/resources.ap_" />  
    <property name="resources-package-ospath" value="${basedir}/${resources-package}" />  
      
    <!-- 未认证apk包 -->  
    <property name="out-unsigned-package" value="${outdir-bin}/${APP_NAME}-unsigned.apk" />  
    <property name="out-unsigned-package-ospath" value="${basedir}/${out-unsigned-package}" />  
      
    <!-- 证书文件 -->  
    <property name="keystore-file" value="${basedir}/release.keystore" />  
      
    <!-- 已认证apk包 -->  
    <property name="out-signed-package" value="${outdir-bin}/${APP_NAME}_unZipalign.apk" />  
    <property name="out-signed-package-ospath" value="${basedir}/${out-signed-package}" />  
    
    <!-- 优化后的apk包  -->
	
	<property name="ozipalign-package" value="${outdir-bin}/${APP_NAME}.apk" />  
	<property name="zipalign-package-ospath" value="${basedir}/${ozipalign-package}" />  
    
    
    
    
    <!-- 初始化工作 -->  
    <target name="init">  
        <echo>Initializing all output directories...</echo>  
        <delete dir="${outdir-bin}" />  
        <mkdir dir="${outdir-bin}" />  
        <mkdir dir="${outdir-classes}" />  
    </target>  
    
    
    
    <!-- 根据工程中的资源文件生成R.java文件  -->  
    <target name="gen-R" depends="init">  
        <echo>Generating R.java from the resources...</echo>  
        <exec executable="${aapt}" failonerror="true">  
            <arg value="package" />  
            <arg value="-f" />  
            <arg value="-m" />  
            <arg value="-J" />  
            <arg value="${outdir-gen}" />  
            <arg value="-S" />  
            <arg value="${resource-dir}" />  
            <arg value="-M" />  
            <arg value="${manifest-xml}" />  
            <arg value="-I" />  
            <arg value="${android-jar}" />  
        </exec>  
    </target>  
    
    
    
    <!-- 编译aidl文件 -->  
    <target name="aidl" depends="gen-R">  
        <echo>Compiling .aidl into java files...</echo>  
        <apply executable="${aidl}" failonerror="true">  
            <!-- 指定预处理文件 -->  
            <arg value="-p${framework-aidl}"/>  
            <!-- aidl声明的目录 -->  
            <arg value="-I${srcdir}"/>  
            <!-- 目标文件目录 -->  
            <arg value="-o${outdir-gen}"/>  
            <!-- 指定哪些文件需要编译 -->  
            <fileset dir="${srcdir}">  
                <include name="**/*.aidl"/>  
            </fileset>  
        </apply>  
    </target>  
    
    
    <!-- 将工程中的java源文件编译成class文件 -->  
    <target name="compile" depends="aidl">  
        <echo>Compiling java source code...</echo>  
        <javac encoding="utf-8" target="1.5" srcdir="." destdir="${outdir-classes}" bootclasspath="${android-jar}" includeantruntime="on">  
            <classpath>  
                <fileset dir="${external-libs}" includes="*.jar"/>  
            	<fileset dir="${sdk-tools}/support" includes="*.jar"/>
                <filelist>  
                    <file name="${android-maps-jar}"/>  
                </filelist>  
            </classpath>  
        </javac>  
    </target>  
    
    
    <!-- 将.class文件转化成.dex文件 -->  
    <target name="dex" depends="compile">  
        <echo>Converting compiled files and external libraries into a .dex file...</echo>  
        <exec executable="${dx}" failonerror="true">  
            <arg value="--dex" />  
            <!-- 输出文件 -->  
            <arg value="--output=${dex-ospath}" />  
            <!-- 要生成.dex文件的源classes和libraries -->  
            <arg value="${outdir-classes-ospath}" />  
            <arg value="${external-libs-ospath}"/>  
        	 
        </exec>  
    </target>  
    
    
    
    <!-- 将资源文件放进输出目录 -->  
    <target name="package-res-and-assets">  
        <echo>Packaging resources and assets...</echo>  
        <exec executable="${aapt}" failonerror="true">  
            <arg value="package" />  
            <arg value="-f" />  
            <arg value="-M" />  
            <arg value="${manifest-xml}" />  
            <arg value="-S" />  
            <arg value="${resource-dir}" />  
            <arg value="-A" />  
            <arg value="${asset-dir}" />  
            <arg value="-I" />  
            <arg value="${android-jar}" />  
            <arg value="-F" />  
            <arg value="${resources-package}" />  
        </exec>  
    </target>  
    
    
    <!-- 打包成未签证的apk -->  
    <target name="package" depends="dex, package-res-and-assets">  
        <echo>Packaging unsigned apk for release...</echo>  
        <exec executable="${apkbuilder}" failonerror="true">  
            <arg value="${out-unsigned-package-ospath}" />  
            <arg value="-u" />  
            <arg value="-z" />  
            <arg value="${resources-package-ospath}" />  
            <arg value="-f" />  
            <arg value="${dex-ospath}" />  
            <arg value="-rf" />  
            <arg value="${srcdir-ospath}" />  
        	<arg value="-rj" />
	        <arg value="${external-libs-ospath}" />
	        <arg value="-nf"/>
	        <arg value="${external-libs-ospath}"/>
        </exec>  
        <echo>It will need to be signed with jarsigner before being published.</echo>  
    </target>  
    
    
    <!-- 对apk进行签证 -->  
    <target name="jarsigner" depends="package">  
        <echo>Packaging signed apk for release...</echo>  
        <exec executable="${jarsigner}" failonerror="true">  
            <arg value="-keystore" />  
            <arg value="${keystore-file}" />  
            <arg value="-storepass" />  
            <arg value="hundsun" />  
            <arg value="-keypass" />  
            <arg value="hundsun" />  
            <arg value="-signedjar" />  
            <arg value="${out-signed-package-ospath}" />  
            <arg value="${out-unsigned-package-ospath}"/>  
            <!-- 不要忘了证书的别名 -->  
            <arg value="hsmaw"/>  
        </exec>  
    </target>  
    
	<!-- 对apk进行 优化 -->  
	<target name="zipalign" depends="jarsigner">  
	    <exec executable="${zipalign}" failonerror="true">  
	        <arg value="-v" />  
	        <arg value="-f" />  
	        <arg value="4" />  
	        <arg value="${out-signed-package-ospath}" />  
	        <arg value="${zipalign-package-ospath}" />  
	    </exec>  
	</target>  
    
    <!-- 发布 -->  
    <target name="release" depends="zipalign">  
        <!-- 删除未签证apk -->  
        <delete file="${out-unsigned-package-ospath}"/> 
    	<!-- 删除已签证未优化apk --> 
    	<delete file="${out-signed-package-ospath}"/>
        <echo>APK is released. path:${out-signed-package-ospath}</echo>  
    	<copy file="${zipalign-package-ospath}" todir="${COPY_TO}"></copy>
    	<copy file="${zipalign-package-ospath}" todir="${COPY_TO2}"></copy>
    	<echo>APK is been copied. path:${COPY_TO}</echo>  
    </target>  
    
	
	<!-- 利用pscp上传至服务器  -->
	<target name="upload" depends="release" description="securely upload war file to server">
		<echo message="uploading  file to server using pscp" />
		<exec executable="pscp.exe">
			<arg value="-v" />
			<arg value="-pw" />
			<arg value="hundsun" />
			<arg value="${zipalign-package-ospath}" />
			<arg value="${SERVER1_USERNAME}@${SERVER1_IP}:${SERVER1_DIR}/" />
		</exec>
		<echo message="done uploading file to server using pscp" />
	</target>
	  
	<target name="deploy" depends="release"></target>
</project>  